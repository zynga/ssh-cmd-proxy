/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details on writing Custom Plugins, please refer to https://docs.gradle.org/8.3/userguide/custom_plugins.html in the Gradle documentation.
 */

plugins {
    id("com.diffplug.spotless") version "6.25.0"
    id("com.gradle.plugin-publish") version "1.2.1"
    signing
}


repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation("org.junit.jupiter:junit-jupiter:5.9.3")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    // https://mvnrepository.com/artifact/org.apache.sshd/sshd-core
    implementation("org.apache.sshd:sshd-core:2.12.1")
    // https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk15on
    implementation("org.bouncycastle:bcprov-jdk15on:1.70")
    // https://mvnrepository.com/artifact/net.i2p.crypto/eddsa
    implementation("net.i2p.crypto:eddsa:0.3.0")
}

group = "com.zynga"
version = "1.0"

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

publishing {
    publications {
        create<MavenPublication>("SSHCmdProxy") {
            from(components["java"])
        }
    }

    repositories {
        maven {
            name = "myRepo"
            url = uri(layout.buildDirectory.dir("repo"))
        }
    }
}

gradlePlugin {
    website = "https://github.com/zynga/ssh-cmd-proxy"
    vcsUrl = "https://github.com/zynga/ssh-cmd-proxy.git"
    plugins {
        create("SSHCmdProxy") {
            id = "com.zynga.aquinney.ssh-cmd-proxy"
            implementationClass = "com.zynga.aquinney.sshcmdproxy.SSHCmdProxy"
            displayName = "SSH Command Proxy"
            description =
                "A Gradle plugin that fixes some technical deficiencies and expands the capabilities of source dependencies."
            tags = listOf("git", "source", "dependencies", "dependency", "ssh", "auth", "authentication", "github")
        }
    }
}

signing {
    useGpgCmd()
    sign(configurations.runtimeElements.get())
}

spotless {
    java {
        googleJavaFormat()
    }
}

// Add a source set for the functional test suite
val functionalTestSourceSet = sourceSets.create("functionalTest") {}

configurations["functionalTestImplementation"].extendsFrom(configurations["testImplementation"])
configurations["functionalTestRuntimeOnly"].extendsFrom(configurations["testRuntimeOnly"])

// Add a task to run the functional tests
val functionalTest by tasks.registering(Test::class) {
    testClassesDirs = functionalTestSourceSet.output.classesDirs
    classpath = functionalTestSourceSet.runtimeClasspath
    useJUnitPlatform()
}

gradlePlugin.testSourceSets.add(functionalTestSourceSet)

tasks.named<Task>("check") {
    // Run the functional tests as part of `check`
    dependsOn(functionalTest)
}

tasks.named<Test>("test") {
    // Use JUnit Jupiter for unit tests.
    useJUnitPlatform()
}
